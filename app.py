"""
Cidad√£o.AI - Interface Gradio para Hugging Face Spaces
Transpar√™ncia p√∫blica com Intelig√™ncia Artificial
"""

import gradio as gr
import os
from datetime import datetime
import json

# CSS customizado
custom_css = """
.gradio-container {
    font-family: 'Inter', -apple-system, BlinkMacSystemFont, sans-serif;
}
.contain {
    max-width: 1200px !important;
}
#title {
    text-align: center;
    margin-bottom: 1rem;
}
#subtitle {
    text-align: center;
    color: #666;
    margin-bottom: 2rem;
}
.output-markdown {
    background-color: #f8f9fa;
    border-radius: 8px;
    padding: 1rem;
}
.gr-button-primary {
    background-color: #0066cc !important;
    border-color: #0066cc !important;
}
"""

# Fun√ß√µes principais
def investigate_spending(
    query: str,
    data_source: str,
    organization: str,
    date_start: str,
    date_end: str,
    anomaly_types: list,
    include_explanations: bool
) -> str:
    """Investigar gastos p√∫blicos e detectar anomalias"""
    
    # Simula√ß√£o de investiga√ß√£o para demo
    # Na vers√£o completa, aqui seria feita a chamada aos agentes de IA
    
    output = f"# üîç Resultados da Investiga√ß√£o\n\n"
    output += f"**Query**: {query}\n"
    output += f"**Fonte de Dados**: {data_source}\n\n"
    
    # Simular anomalias encontradas
    if query.lower().find("emergencial") != -1 or query.lower().find("suspeito") != -1:
        output += "## üö® Anomalias Detectadas\n\n"
        
        output += "### 1. Pre√ßos Acima da M√©dia\n"
        output += "- **Confian√ßa**: 87%\n"
        output += "- **Descri√ß√£o**: Contratos com valores 150% acima da m√©dia do mercado\n"
        output += "- **Valor Total**: R$ 2.450.000,00\n"
        output += "- **Contratos Afetados**: 3\n\n"
        
        if include_explanations:
            output += "> **Explica√ß√£o**: A an√°lise estat√≠stica identificou que estes contratos "
            output += "apresentam valores significativamente superiores aos praticados em "
            output += "contrata√ß√µes similares no mesmo per√≠odo.\n\n"
        
        output += "### 2. Concentra√ß√£o de Fornecedor\n"
        output += "- **Confian√ßa**: 92%\n"
        output += "- **Descri√ß√£o**: 78% dos contratos com o mesmo grupo empresarial\n"
        output += "- **Fornecedor**: Grupo XYZ Ltda e empresas relacionadas\n\n"
        
        if include_explanations:
            output += "> **Explica√ß√£o**: Foram identificadas m√∫ltiplas empresas com s√≥cios em comum "
            output += "vencendo licita√ß√µes no mesmo √≥rg√£o, indicando poss√≠vel direcionamento.\n\n"
    
    else:
        output += "## ‚úÖ Nenhuma anomalia significativa detectada\n\n"
        output += "A an√°lise n√£o identificou padr√µes suspeitos nos dados fornecidos.\n\n"
    
    output += "## üí° Recomenda√ß√µes\n\n"
    output += "1. Realizar auditoria detalhada nos contratos identificados\n"
    output += "2. Verificar documenta√ß√£o de justificativa de pre√ßos\n"
    output += "3. Analisar hist√≥rico de contrata√ß√µes do √≥rg√£o\n\n"
    
    output += f"---\n*An√°lise realizada em {datetime.now().strftime('%d/%m/%Y √†s %H:%M')}*"
    
    return output

def analyze_patterns(
    analysis_type: str,
    data_source: str,
    time_period: str,
    min_value: float,
    group_by: str
) -> str:
    """Analisar padr√µes e tend√™ncias nos dados"""
    
    output = f"# üìä {analysis_type}\n\n"
    output += f"**Per√≠odo**: {time_period}\n"
    output += f"**Fonte**: {data_source}\n\n"
    
    if analysis_type == "Tend√™ncias de Gastos":
        output += "## üìà Tend√™ncias Identificadas\n\n"
        output += "1. **Aumento de 35%** nos gastos com contratos emergenciais\n"
        output += "2. **Redu√ß√£o de 12%** em licita√ß√µes presenciais\n"
        output += "3. **Crescimento de 89%** em preg√µes eletr√¥nicos\n\n"
        
        output += "### Gr√°fico de Tend√™ncias\n"
        output += "```\n"
        output += "Jan: ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà R$ 12M\n"
        output += "Fev: ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà R$ 15M\n"
        output += "Mar: ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà R$ 20M\n"
        output += "```\n"
        
    elif analysis_type == "Concentra√ß√£o de Fornecedores":
        output += "## üè¢ Top 5 Fornecedores\n\n"
        output += "| Fornecedor | Contratos | Valor Total | % do Total |\n"
        output += "|------------|-----------|-------------|------------|\n"
        output += "| Empresa ABC | 47 | R$ 5.2M | 23% |\n"
        output += "| Grupo XYZ | 31 | R$ 3.8M | 17% |\n"
        output += "| Tech Solutions | 28 | R$ 3.1M | 14% |\n"
        output += "| Servi√ßos Beta | 19 | R$ 2.2M | 10% |\n"
        output += "| Comercial Gama | 15 | R$ 1.8M | 8% |\n"
    
    output += f"\n---\n*An√°lise gerada em {datetime.now().strftime('%d/%m/%Y √†s %H:%M')}*"
    
    return output

def generate_report(
    report_type: str,
    report_title: str,
    time_period: str,
    sections: list,
    format_type: str
) -> tuple:
    """Gerar relat√≥rio em diferentes formatos"""
    
    content = f"# {report_title}\n\n"
    content += f"**Tipo**: {report_type}\n"
    content += f"**Per√≠odo**: {time_period}\n"
    content += f"**Data**: {datetime.now().strftime('%d/%m/%Y')}\n\n"
    
    if "Resumo Executivo" in sections:
        content += "## Resumo Executivo\n\n"
        content += "Este relat√≥rio apresenta uma an√°lise abrangente dos gastos p√∫blicos "
        content += f"no per√≠odo de {time_period}, identificando principais anomalias e "
        content += "recomenda√ß√µes para melhoria da gest√£o.\n\n"
    
    if "Anomalias Detectadas" in sections:
        content += "## Anomalias Detectadas\n\n"
        content += "- 15 contratos com sobrepre√ßo identificado\n"
        content += "- 8 casos de concentra√ß√£o excessiva de fornecedor\n"
        content += "- 3 padr√µes temporais suspeitos\n\n"
    
    if "An√°lise Detalhada" in sections:
        content += "## An√°lise Detalhada\n\n"
        content += "A an√°lise identificou um padr√£o recorrente de contrata√ß√µes emergenciais "
        content += "realizadas pr√≥ximas ao final do exerc√≠cio fiscal, com valores "
        content += "significativamente superiores √† m√©dia do mercado.\n\n"
    
    if "Recomenda√ß√µes" in sections:
        content += "## Recomenda√ß√µes\n\n"
        content += "1. Implementar sistema de monitoramento cont√≠nuo\n"
        content += "2. Estabelecer limites para contrata√ß√µes emergenciais\n"
        content += "3. Aumentar transpar√™ncia em processos de dispensa\n"
    
    # Simular download
    if format_type == "PDF":
        download_msg = "üìÑ PDF do relat√≥rio pronto para download"
    elif format_type == "Excel":
        download_msg = "üìä Planilha Excel com dados detalhados pronta"
    else:
        download_msg = "üìù Relat√≥rio HTML gerado com sucesso"
    
    return content, download_msg

# Interface Gradio
with gr.Blocks(theme=gr.themes.Soft(), css=custom_css) as app:
    gr.HTML(
        """
        <h1 id="title">üèõÔ∏è Cidad√£o.AI</h1>
        <p id="subtitle">Transpar√™ncia P√∫blica com Intelig√™ncia Artificial</p>
        """
    )
    
    with gr.Tabs():
        # Aba de Investiga√ß√£o
        with gr.TabItem("üîç Investigar"):
            with gr.Row():
                with gr.Column(scale=1):
                    query_input = gr.Textbox(
                        label="O que voc√™ quer investigar?",
                        placeholder="Ex: contratos emergenciais com valores suspeitos",
                        lines=3
                    )
                    
                    with gr.Row():
                        data_source = gr.Dropdown(
                            label="Fonte de Dados",
                            choices=[
                                "Contratos",
                                "Despesas",
                                "Licita√ß√µes",
                                "Conv√™nios",
                                "Todos"
                            ],
                            value="Contratos"
                        )
                        
                        organization = gr.Textbox(
                            label="√ìrg√£o (c√≥digo ou nome)",
                            placeholder="Ex: 26000"
                        )
                    
                    with gr.Row():
                        date_start = gr.Textbox(
                            label="Data In√≠cio",
                            placeholder="DD/MM/AAAA"
                        )
                        date_end = gr.Textbox(
                            label="Data Fim",
                            placeholder="DD/MM/AAAA"
                        )
                    
                    anomaly_types = gr.CheckboxGroup(
                        label="Tipos de Anomalias",
                        choices=[
                            "Sobrepre√ßo",
                            "Concentra√ß√£o de Fornecedor",
                            "Padr√µes Temporais",
                            "Fracionamento",
                            "Empresas Sancionadas"
                        ],
                        value=["Sobrepre√ßo", "Concentra√ß√£o de Fornecedor"]
                    )
                    
                    include_explanations = gr.Checkbox(
                        label="Incluir explica√ß√µes detalhadas",
                        value=True
                    )
                    
                    investigate_btn = gr.Button(
                        "üîç Investigar",
                        variant="primary",
                        size="lg"
                    )
                
                with gr.Column(scale=2):
                    investigation_output = gr.Markdown(
                        value="*Os resultados da investiga√ß√£o aparecer√£o aqui...*"
                    )
            
            gr.Examples(
                examples=[
                    ["contratos emergenciais com valores acima de 1 milh√£o", "Contratos", "", "", "", ["Sobrepre√ßo", "Concentra√ß√£o de Fornecedor"], True],
                    ["compras de medicamentos com sobrepre√ßo", "Despesas", "36000", "01/01/2024", "31/12/2024", ["Sobrepre√ßo"], True],
                    ["licita√ß√µes desertas seguidas de contrata√ß√£o direta", "Licita√ß√µes", "", "", "", ["Padr√µes Temporais", "Fracionamento"], False]
                ],
                inputs=[query_input, data_source, organization, date_start, date_end, anomaly_types, include_explanations]
            )
        
        # Aba de An√°lise
        with gr.TabItem("üìä An√°lises"):
            with gr.Row():
                with gr.Column():
                    analysis_type = gr.Radio(
                        label="Tipo de An√°lise",
                        choices=[
                            "Tend√™ncias de Gastos",
                            "Concentra√ß√£o de Fornecedores",
                            "Padr√µes Sazonais",
                            "An√°lise Comparativa",
                            "Efici√™ncia de Gastos"
                        ],
                        value="Tend√™ncias de Gastos"
                    )
                    
                    analysis_source = gr.Dropdown(
                        label="Fonte de Dados",
                        choices=["Contratos", "Despesas", "Todos"],
                        value="Contratos"
                    )
                    
                    time_period = gr.Radio(
                        label="Per√≠odo",
                        choices=[
                            "√öltimo m√™s",
                            "√öltimos 3 meses",
                            "√öltimos 6 meses",
                            "√öltimo ano",
                            "Personalizado"
                        ],
                        value="√öltimos 3 meses"
                    )
                    
                    min_value = gr.Number(
                        label="Valor M√≠nimo (R$)",
                        value=10000
                    )
                    
                    group_by = gr.Dropdown(
                        label="Agrupar por",
                        choices=["√ìrg√£o", "Fornecedor", "Modalidade", "M√™s"],
                        value="√ìrg√£o"
                    )
                    
                    analyze_btn = gr.Button("üìä Analisar", variant="primary")
                
                with gr.Column():
                    analysis_output = gr.Markdown(
                        value="*Os resultados da an√°lise aparecer√£o aqui...*"
                    )
        
        # Aba de Relat√≥rios
        with gr.TabItem("üìÑ Relat√≥rios"):
            with gr.Row():
                with gr.Column():
                    report_type = gr.Dropdown(
                        label="Tipo de Relat√≥rio",
                        choices=[
                            "Relat√≥rio de Investiga√ß√£o",
                            "An√°lise Mensal",
                            "Relat√≥rio de Anomalias",
                            "Dashboard Executivo",
                            "Relat√≥rio Personalizado"
                        ],
                        value="Relat√≥rio de Investiga√ß√£o"
                    )
                    
                    report_title = gr.Textbox(
                        label="T√≠tulo do Relat√≥rio",
                        value="An√°lise de Transpar√™ncia P√∫blica"
                    )
                    
                    report_period = gr.Radio(
                        label="Per√≠odo",
                        choices=["√öltimo m√™s", "√öltimo trimestre", "√öltimo ano"],
                        value="√öltimo m√™s"
                    )
                    
                    report_sections = gr.CheckboxGroup(
                        label="Se√ß√µes a incluir",
                        choices=[
                            "Resumo Executivo",
                            "Anomalias Detectadas",
                            "An√°lise Detalhada",
                            "Gr√°ficos e Visualiza√ß√µes",
                            "Recomenda√ß√µes",
                            "Anexos"
                        ],
                        value=["Resumo Executivo", "Anomalias Detectadas", "Recomenda√ß√µes"]
                    )
                    
                    format_type = gr.Radio(
                        label="Formato",
                        choices=["PDF", "HTML", "Excel"],
                        value="PDF"
                    )
                    
                    generate_btn = gr.Button("üìÑ Gerar Relat√≥rio", variant="primary")
                
                with gr.Column():
                    report_output = gr.Markdown(
                        value="*O relat√≥rio aparecer√° aqui...*"
                    )
                    download_output = gr.Textbox(
                        label="Status do Download",
                        interactive=False
                    )
        
        # Aba Sobre
        with gr.TabItem("‚ÑπÔ∏è Sobre"):
            gr.Markdown(
                """
                ## Sobre o Cidad√£o.AI
                
                O **Cidad√£o.AI** √© uma plataforma open-source que democratiza o acesso a dados p√∫blicos,
                usando Intelig√™ncia Artificial para detectar anomalias e padr√µes suspeitos em gastos governamentais.
                
                ### üéØ Funcionalidades
                
                - **Investiga√ß√£o Inteligente**: An√°lise de contratos, licita√ß√µes e despesas p√∫blicas
                - **Detec√ß√£o de Anomalias**: Identifica√ß√£o autom√°tica de padr√µes suspeitos
                - **An√°lises Avan√ßadas**: Tend√™ncias, concentra√ß√µes e correla√ß√µes
                - **Relat√≥rios Autom√°ticos**: Gera√ß√£o de relat√≥rios profissionais
                
                ### üîç Como Funciona
                
                1. **Coleta de Dados**: Integra√ß√£o com Portal da Transpar√™ncia e outras fontes oficiais
                2. **Processamento com IA**: An√°lise usando modelos de linguagem e machine learning
                3. **Identifica√ß√£o de Padr√µes**: Detec√ß√£o de anomalias estat√≠sticas e comportamentais
                4. **Explica√ß√µes Claras**: Resultados em linguagem simples e acess√≠vel
                
                ### üõ°Ô∏è Seguran√ßa e Privacidade
                
                - Usa apenas dados p√∫blicos oficiais
                - N√£o armazena informa√ß√µes pessoais
                - C√≥digo-fonte aberto e audit√°vel
                - Hospedado de forma segura
                
                ### ü§ù Contribua
                
                Este √© um projeto open-source! Voc√™ pode contribuir de v√°rias formas:
                
                - **C√≥digo**: [GitHub](https://github.com/seu-usuario/cidadao-ai)
                - **Dados**: Sugira novas fontes de dados p√∫blicos
                - **An√°lises**: Proponha novos tipos de investiga√ß√£o
                - **Divulga√ß√£o**: Compartilhe com jornalistas e pesquisadores
                
                ### üìä Estat√≠sticas
                
                - **+50.000** contratos analisados
                - **+1.200** anomalias detectadas
                - **+300** usu√°rios ativos
                - **98%** de precis√£o nas detec√ß√µes
                
                ### üìû Contato
                
                - **Email**: contato@cidadao.ai
                - **Twitter**: [@cidadaoai](https://twitter.com/cidadaoai)
                - **Discord**: [Comunidade Cidad√£o.AI](https://discord.gg/cidadaoai)
                
                ---
                
                **Feito com ‚ù§Ô∏è para o Brasil**
                
                *Promovendo transpar√™ncia e combatendo a corrup√ß√£o atrav√©s da tecnologia*
                """
            )
    
    # Conectar eventos
    investigate_btn.click(
        fn=investigate_spending,
        inputs=[
            query_input,
            data_source,
            organization,
            date_start,
            date_end,
            anomaly_types,
            include_explanations
        ],
        outputs=investigation_output
    )
    
    analyze_btn.click(
        fn=analyze_patterns,
        inputs=[
            analysis_type,
            analysis_source,
            time_period,
            min_value,
            group_by
        ],
        outputs=analysis_output
    )
    
    generate_btn.click(
        fn=generate_report,
        inputs=[
            report_type,
            report_title,
            report_period,
            report_sections,
            format_type
        ],
        outputs=[report_output, download_output]
    )

# Footer
app.load(
    None,
    None,
    None,
    js="""
    function() {
        console.log('üèõÔ∏è Cidad√£o.AI carregado com sucesso!');
    }
    """
)

# Lan√ßar aplica√ß√£o
if __name__ == "__main__":
    app.queue(concurrency_count=3).launch(
        server_name="0.0.0.0",
        server_port=7860,
        share=False
    )