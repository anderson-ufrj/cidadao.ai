version: '3.8'

services:
  # Frontend (Nginx serving static files)
  frontend:
    image: nginx:1.25-alpine
    container_name: cidadao-frontend
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./frontend:/usr/share/nginx/html:ro
      - ./infrastructure/nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./infrastructure/nginx/ssl:/etc/nginx/ssl:ro
    depends_on:
      - api
    networks:
      - cidadao-network
    restart: unless-stopped

  # API Backend
  api:
    build:
      context: .
      dockerfile: infrastructure/docker/Dockerfile.api
    container_name: cidadao-api
    ports:
      - "8000:8000"
    environment:
      - ENVIRONMENT=production
      - DATABASE_URL=postgresql://cidadao:${POSTGRES_PASSWORD}@postgres:5432/cidadao_ai
      - REDIS_URL=redis://redis:6379/0
      - JWT_SECRET_KEY=${JWT_SECRET_KEY}
      - PORTAL_TRANSPARENCIA_API_KEY=${PORTAL_TRANSPARENCIA_API_KEY}
      - GROQ_API_KEY=${GROQ_API_KEY}
      - TOGETHER_AI_API_KEY=${TOGETHER_AI_API_KEY}
      - HUGGINGFACE_API_KEY=${HUGGINGFACE_API_KEY}
    volumes:
      - ./data:/app/data
      - ./logs:/app/logs
    depends_on:
      - postgres
      - redis
    networks:
      - cidadao-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: cidadao-postgres
    environment:
      - POSTGRES_DB=cidadao_ai
      - POSTGRES_USER=cidadao
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./infrastructure/postgres/init.sql:/docker-entrypoint-initdb.d/init.sql:ro
    networks:
      - cidadao-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U cidadao -d cidadao_ai"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: cidadao-redis
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD}
    volumes:
      - redis_data:/data
    networks:
      - cidadao-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Celery Worker for Background Tasks
  worker:
    build:
      context: .
      dockerfile: infrastructure/docker/Dockerfile.worker
    container_name: cidadao-worker
    environment:
      - ENVIRONMENT=production
      - DATABASE_URL=postgresql://cidadao:${POSTGRES_PASSWORD}@postgres:5432/cidadao_ai
      - REDIS_URL=redis://redis:6379/0
      - PORTAL_TRANSPARENCIA_API_KEY=${PORTAL_TRANSPARENCIA_API_KEY}
      - GROQ_API_KEY=${GROQ_API_KEY}
      - TOGETHER_AI_API_KEY=${TOGETHER_AI_API_KEY}
      - HUGGINGFACE_API_KEY=${HUGGINGFACE_API_KEY}
    volumes:
      - ./data:/app/data
      - ./logs:/app/logs
    depends_on:
      - postgres
      - redis
    networks:
      - cidadao-network
    restart: unless-stopped

  # Monitoring with Prometheus
  prometheus:
    image: prom/prometheus:latest
    container_name: cidadao-prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./infrastructure/monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    networks:
      - cidadao-network
    restart: unless-stopped

  # Grafana for Visualization
  grafana:
    image: grafana/grafana:latest
    container_name: cidadao-grafana
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_USER=admin
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD}
      - GF_USERS_ALLOW_SIGN_UP=false
    volumes:
      - grafana_data:/var/lib/grafana
      - ./infrastructure/monitoring/grafana/provisioning:/etc/grafana/provisioning:ro
    networks:
      - cidadao-network
    restart: unless-stopped

  # Log Aggregation with Loki
  loki:
    image: grafana/loki:latest
    container_name: cidadao-loki
    ports:
      - "3100:3100"
    volumes:
      - loki_data:/loki
      - ./infrastructure/monitoring/loki.yml:/etc/loki/local-config.yaml:ro
    command: -config.file=/etc/loki/local-config.yaml
    networks:
      - cidadao-network
    restart: unless-stopped

  # Log Collection with Promtail
  promtail:
    image: grafana/promtail:latest
    container_name: cidadao-promtail
    volumes:
      - ./logs:/var/log/cidadao:ro
      - ./infrastructure/monitoring/promtail.yml:/etc/promtail/config.yml:ro
    command: -config.file=/etc/promtail/config.yml
    networks:
      - cidadao-network
    restart: unless-stopped

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local
  loki_data:
    driver: local

networks:
  cidadao-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16