"""
Vers√£o simplificada da API de Transpar√™ncia para Hugging Face Spaces
Otimizada para funcionar sem depend√™ncias pesadas
"""

import os
import json
import time
import requests
from typing import Dict, List, Optional, Any
from datetime import datetime, timedelta
import logging

# Configurar logging
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# Configura√ß√µes da API
TRANSPARENCY_API_KEY = os.getenv("TRANSPARENCY_API_KEY")
TRANSPARENCY_API_BASE_URL = "https://api.portaldatransparencia.gov.br"
TRANSPARENCY_API_HEADER = "chave-api-dados"

# Documenta√ß√£o da API: https://api.portaldatransparencia.gov.br/swagger-ui.html
# Endpoints testados:
# - /api-de-dados/contratos
# - /api-de-dados/despesas  
# - /api-de-dados/convenios
# - /api-de-dados/licitacoes

# Cache simples em mem√≥ria
_cache = {}
_cache_timestamps = {}
CACHE_DURATION = 300  # 5 minutos

# Rate limiting simples
_last_request_time = 0
MIN_REQUEST_INTERVAL = 0.7  # ~90 requests per minute


class TransparencyAPIClient:
    """Cliente simplificado para a API do Portal da Transpar√™ncia"""
    
    def __init__(self):
        self.api_key = TRANSPARENCY_API_KEY
        self.base_url = TRANSPARENCY_API_BASE_URL
        self.headers = {
            TRANSPARENCY_API_HEADER: self.api_key,
            "Content-Type": "application/json",
            "User-Agent": "CidadaoAI/1.0.0"
        }
        
        if not self.api_key:
            logger.error("‚ùå TRANSPARENCY_API_KEY n√£o configurada")
            raise ValueError("TRANSPARENCY_API_KEY n√£o configurada")
        
        logger.info("‚úÖ API client inicializado")
    
    def _wait_for_rate_limit(self):
        """Aguarda para respeitar rate limit"""
        global _last_request_time
        current_time = time.time()
        time_since_last = current_time - _last_request_time
        
        if time_since_last < MIN_REQUEST_INTERVAL:
            sleep_time = MIN_REQUEST_INTERVAL - time_since_last
            logger.info(f"‚è±Ô∏è Aguardando {sleep_time:.2f}s para rate limit")
            time.sleep(sleep_time)
        
        _last_request_time = time.time()
    
    def _get_cache_key(self, endpoint: str, params: Dict) -> str:
        """Gera chave de cache"""
        params_str = json.dumps(params, sort_keys=True)
        return f"{endpoint}:{hash(params_str)}"
    
    def _get_cached_response(self, cache_key: str) -> Optional[Dict]:
        """Recupera resposta do cache se v√°lida"""
        if cache_key in _cache:
            timestamp = _cache_timestamps.get(cache_key, 0)
            if time.time() - timestamp < CACHE_DURATION:
                logger.info(f"üì¶ Cache hit: {cache_key}")
                return _cache[cache_key]
            else:
                # Cache expirado
                del _cache[cache_key]
                del _cache_timestamps[cache_key]
        return None
    
    def _cache_response(self, cache_key: str, response: Dict):
        """Salva resposta no cache"""
        _cache[cache_key] = response
        _cache_timestamps[cache_key] = time.time()
        logger.info(f"üíæ Cache saved: {cache_key}")
    
    def _make_request(self, endpoint: str, params: Dict = None) -> Dict:
        """Faz requisi√ß√£o para a API"""
        if params is None:
            params = {}
        
        # Verificar cache
        cache_key = self._get_cache_key(endpoint, params)
        cached_response = self._get_cached_response(cache_key)
        if cached_response:
            return cached_response
        
        # Rate limit
        self._wait_for_rate_limit()
        
        url = f"{self.base_url}{endpoint}"
        
        try:
            logger.info(f"üåê Fazendo requisi√ß√£o: {endpoint}")
            logger.info(f"üîë Usando chave: {self.api_key[:10]}...")
            
            response = requests.get(
                url,
                headers=self.headers,
                params=params,
                timeout=30
            )
            
            logger.info(f"üì° Status: {response.status_code}")
            
            if response.status_code == 200:
                data = response.json()
                
                # Salvar no cache
                self._cache_response(cache_key, data)
                
                logger.info(f"‚úÖ Sucesso: {len(data) if isinstance(data, list) else 1} registros")
                return data
            
            elif response.status_code == 429:
                logger.warning("‚ö†Ô∏è Rate limit excedido")
                time.sleep(60)  # Aguardar 1 minuto
                return self._make_request(endpoint, params)  # Retry
            
            elif response.status_code == 401:
                logger.error("üîê Erro de autentica√ß√£o - chave inv√°lida")
                return {
                    "error": "Chave API inv√°lida",
                    "message": "Verifique se a chave est√° correta e se voc√™ tem permiss√£o para acessar a API",
                    "help": "Registre-se em: https://api.portaldatransparencia.gov.br/api-de-dados/swagger-ui.html"
                }
            
            else:
                logger.error(f"‚ùå Erro HTTP {response.status_code}: {response.text}")
                return {
                    "error": f"Erro HTTP {response.status_code}",
                    "message": response.text
                }
        
        except requests.exceptions.Timeout:
            logger.error("‚è∞ Timeout na requisi√ß√£o")
            return {"error": "Timeout na requisi√ß√£o"}
        
        except Exception as e:
            logger.error(f"üí• Erro na requisi√ß√£o: {str(e)}")
            return {"error": f"Erro na requisi√ß√£o: {str(e)}"}
    
    def get_contracts(self, **params) -> Dict:
        """Busca contratos"""
        return self._make_request("/api-de-dados/contratos", params)
    
    def get_expenses(self, **params) -> Dict:
        """Busca despesas"""
        return self._make_request("/api-de-dados/despesas", params)
    
    def get_agreements(self, **params) -> Dict:
        """Busca conv√™nios"""
        return self._make_request("/api-de-dados/convenios", params)
    
    def get_biddings(self, **params) -> Dict:
        """Busca licita√ß√µes"""
        return self._make_request("/api-de-dados/licitacoes", params)
    
    def search_by_cnpj(self, cnpj: str, data_type: str = "contracts") -> Dict:
        """Busca por CNPJ"""
        params = {"cnpjContratado": cnpj}
        
        if data_type == "contracts":
            return self.get_contracts(**params)
        elif data_type == "expenses":
            return self.get_expenses(**params)
        elif data_type == "agreements":
            return self.get_agreements(**params)
        else:
            return {"error": f"Tipo de dados n√£o suportado: {data_type}"}
    
    def search_by_value(self, min_value: float, max_value: float = None, data_type: str = "contracts") -> Dict:
        """Busca por valor"""
        params = {"valorInicial": min_value}
        if max_value:
            params["valorFinal"] = max_value
        
        if data_type == "contracts":
            return self.get_contracts(**params)
        elif data_type == "expenses":
            return self.get_expenses(**params)
        elif data_type == "agreements":
            return self.get_agreements(**params)
        else:
            return {"error": f"Tipo de dados n√£o suportado: {data_type}"}
    
    def search_by_year(self, year: int, data_type: str = "contracts") -> Dict:
        """Busca por ano"""
        params = {"ano": year}
        
        if data_type == "contracts":
            return self.get_contracts(**params)
        elif data_type == "expenses":
            return self.get_expenses(**params)
        elif data_type == "agreements":
            return self.get_agreements(**params)
        else:
            return {"error": f"Tipo de dados n√£o suportado: {data_type}"}


def format_results_for_display(data: Dict, data_type: str = "contracts") -> str:
    """Formata resultados para exibi√ß√£o"""
    if "error" in data:
        return f"‚ùå **Erro**: {data['error']}"
    
    if not data or (isinstance(data, list) and len(data) == 0):
        return "‚ö†Ô∏è **Nenhum resultado encontrado**"
    
    results = data if isinstance(data, list) else [data]
    
    if len(results) == 0:
        return "‚ö†Ô∏è **Nenhum resultado encontrado**"
    
    # Formata√ß√£o b√°sica
    formatted = f"üìä **Encontrados {len(results)} registro(s)**\n\n"
    
    for i, item in enumerate(results[:10]):  # Limitar a 10 resultados
        formatted += f"**{i+1}. "
        
        if data_type == "contracts":
            formatted += f"Contrato**\n"
            if "objeto" in item:
                formatted += f"üéØ **Objeto**: {item['objeto'][:100]}...\n"
            if "valor" in item:
                formatted += f"üí∞ **Valor**: R$ {item['valor']:,.2f}\n"
            if "fornecedor" in item:
                formatted += f"üè¢ **Fornecedor**: {item['fornecedor']}\n"
            if "dataAssinatura" in item:
                formatted += f"üìÖ **Data**: {item['dataAssinatura']}\n"
        
        elif data_type == "expenses":
            formatted += f"Despesa**\n"
            if "descricao" in item:
                formatted += f"üìù **Descri√ß√£o**: {item['descricao'][:100]}...\n"
            if "valor" in item:
                formatted += f"üí∞ **Valor**: R$ {item['valor']:,.2f}\n"
            if "orgao" in item:
                formatted += f"üèõÔ∏è **√ìrg√£o**: {item['orgao']}\n"
            if "data" in item:
                formatted += f"üìÖ **Data**: {item['data']}\n"
        
        formatted += "\n"
    
    if len(results) > 10:
        formatted += f"... e mais {len(results) - 10} registros\n"
    
    return formatted


def quick_search(query: str) -> str:
    """Busca r√°pida interpretando query em linguagem natural"""
    if not TRANSPARENCY_API_KEY:
        return "‚ùå **API n√£o configurada**\n\nConfigure a vari√°vel TRANSPARENCY_API_KEY."
    
    try:
        client = TransparencyAPIClient()
        
        # An√°lise simples da query
        query_lower = query.lower()
        
        # Buscar por CNPJ
        if "cnpj" in query_lower:
            import re
            cnpj_match = re.search(r'(\d{2}\.\d{3}\.\d{3}/\d{4}-\d{2}|\d{14})', query)
            if cnpj_match:
                cnpj = cnpj_match.group(1)
                logger.info(f"üîç Buscando por CNPJ: {cnpj}")
                results = client.search_by_cnpj(cnpj)
                return format_results_for_display(results, "contracts")
        
        # Buscar por valor
        if "valor" in query_lower or "r$" in query_lower:
            import re
            value_match = re.search(r'(\d+(?:\.\d+)*(?:,\d+)?)', query)
            if value_match:
                value_str = value_match.group(1).replace('.', '').replace(',', '.')
                try:
                    value = float(value_str)
                    logger.info(f"üîç Buscando por valor: R$ {value:,.2f}")
                    results = client.search_by_value(value)
                    return format_results_for_display(results, "contracts")
                except:
                    pass
        
        # Buscar por ano
        if "ano" in query_lower or "202" in query:
            import re
            year_match = re.search(r'(202\d)', query)
            if year_match:
                year = int(year_match.group(1))
                logger.info(f"üîç Buscando por ano: {year}")
                results = client.search_by_year(year)
                return format_results_for_display(results, "contracts")
        
        # Busca padr√£o - contratos recentes
        logger.info("üîç Buscando contratos recentes")
        results = client.get_contracts(tamanhoPagina=20)
        return format_results_for_display(results, "contracts")
    
    except Exception as e:
        logger.error(f"üí• Erro na busca: {str(e)}")
        return f"‚ùå **Erro na busca**: {str(e)}"


# Teste b√°sico da API
if __name__ == "__main__":
    print("üß™ Testando API de Transpar√™ncia...")
    
    if not TRANSPARENCY_API_KEY:
        print("‚ùå TRANSPARENCY_API_KEY n√£o configurada")
        exit(1)
    
    try:
        client = TransparencyAPIClient()
        
        # Teste b√°sico
        print("\nüìä Testando busca de contratos...")
        results = client.get_contracts(tamanhoPagina=5)
        
        if "error" in results:
            print(f"‚ùå Erro: {results['error']}")
        else:
            print(f"‚úÖ Sucesso: {len(results)} contratos encontrados")
            
            # Mostrar primeiro resultado
            if results and len(results) > 0:
                first = results[0]
                print("\nüîç Primeiro resultado:")
                for key, value in first.items():
                    print(f"  {key}: {value}")
    
    except Exception as e:
        print(f"üí• Erro no teste: {str(e)}")